CodeDeploy Concept
######################################################################

AWS CodeDeploy is a deployment service that automates application deployments to:

    Amazon EC2 instances
    On-premises servers
    AWS Lambda functions
    Amazon ECS services


CodeDeploy can deploy code, scripts, files, Lambda functions, and packages. The source files can be stored in:

    Amazon S3
    GitHub
    Bitbucket


AWS CloudBuild can also deploy code, but CodeDeploy offers additional features, such as:

    Deployment strategies (e.g., Blue/Green, Canary)
    Traffic shifting configurations
    Rollback capabilities

Supported Compute Platforms

    EC2 / On-Premises Servers
    AWS Lambda
    Amazon ECS

Core Components

    Deployment Group – A set of instances or services where the deployment occurs.
    Deployment – The process of rolling out a new application revision to a deployment group.
    Deployment Configuration – Defines how the deployment is executed, including speed, batch size, and success conditions.
        For EC2/On-Prem, it specifies minimum healthy instances.
        For ECS and Lambda, it defines how traffic is shifted to the new version.
    Revision – A specific version of your application (e.g., a ZIP file, Docker image, or Lambda function version).
    Application – A logical entity that links revisions, deployment groups, and configurations to ensure the correct deployment process.

Deployment Type (Strategy)
There are only two Deployment startergy available in Code Deploy. However Code Deploy Provide canany/Linear Traffice shifting option with in Deployment group only for 
ECS and lambda.

Note : -  AWS still doesn't support Blue/Green deployments via CloudFormation if you are using EC2. For blue/green deployments, AWS CloudFormation supports deployments on Lambda compute platforms only. 
You can perform Amazon ECS blue/green deployments using AWS::CodeDeploy::BlueGreen hook.
Wasted lot of time on this :) (to write cloudformation for EC2)

For EC2
    For Code Deploy to work on Ec2 Code-Deploy agents are required. Make sure agent is installed on the instance and running
    In-Place Deployment (Rolling Update)
        Stops the old version and installs the new one on the same instances.
        Supported for: EC2, On-Premises----- Important ----Have the option to use Load balancer, But without load balancer is also possible
        Not available for: ECS, Lambda
    Blue/Green Deployment (EC2), You have to use Load Balancer. Without load balancer, Blue Green is not possible for EC2
        1) Provide instances manually ---specify the instances to be counted as your replacement using Amazon EC2 instance tags, Amazon EC2 Auto Scaling group names, or both.
        If you choose this option, you do not need to specify the instances for the replacement environment until you create a deployment.
        That means you define the replacement instance/scaling group during deployment creation. Code Deploy perform the action defined in the appspec.yml file in
        the replacement instance/scaling group. Made that instance part of Target group which is assigned to load balancer. Shift the traffic to replaced
        instance and terminate the original instance.
        2) Copy an existing Amazon EC2 Auto Scaling group-----During the blue/green deployment, CodeDeploy creates the instances for your replacement environment during the deployment. 
            With this option, CodeDeploy uses the Amazon EC2 Auto Scaling group you specify as a template for the replacement environment, including the same number of running 
            instances and many other configuration options.
        
Make sure that you have all required Privs like auto scaling, load balancer, S3 If using as source, EC2 as Code Deploy need all these.
Instance Profile is also required, so that code deploy agents can interact with Code Deploy service. 
If Code Deploy fails, Please check CLoud trail. Tags plays very important role in this. So please set the tages as per you environment.

 

For ECS:
    Blue/Green Deployment: (Use Load Balancer)

    Traffic is shifted between old and new task sets using an Application Load Balancer (ALB).ECS compute platform, you control how 
    traffic is shifted from your original task set to your new task set.
    Supports Canary/Linear deployments:
        ECSLinear10PercentEvery1Minutes – Increases traffic by 10% every minute.
        ECSCanary10Percent5Minutes – Shifts 10% traffic first, waits 5 minutes, then shifts the rest.

For Lambda: (Use Versions mot Load Balancer)
    Blue/Green Deployment

    Traffic is shifted between function versions using an alias.
    Supports Canary/Linear deployments:
    Example configurations:
        LambdaCanary10Percent5Minutes – Routes 10% of traffic first, waits 5 minutes, then routes the rest.
        LambdaCanary10Percent10Minutes – Routes 10% of traffic, waits 10 minutes, then routes the rest.

Important: AWS CodeDeploy does not have a separate Canary or Linear deployment type—they are achieved within Blue/Green deployments using traffic shifting configurations.


Deployment configurations define how fast the deployment occurs and can be applied at the deployment group level.
##############################################################
For EC2 / On-Premises
Configuration	Behavior
CodeDeployDefault.AllAtOnce	Deploys to all instances simultaneously
CodeDeployDefault.HalfAtATime	Deploys to 50% of instances at a time
CodeDeployDefault.OneAtATime	Deploys to one instance at a time
###############################################################
For ECS & Lambda
Configuration	Behavior
ECSLinear10PercentEvery1Minutes	Moves 10% of traffic every minute
ECSCanary10Percent5Minutes	Shifts 10% of traffic first, waits 5 minutes, then shifts the rest
LambdaCanary10Percent10Minutes	Shifts 10% of traffic first, waits 10 minutes, then shifts the rest
Creating a Custom Deployment Configuration

aws deploy create-deployment-config --deployment-config-name ThreeQuartersHealthy --minimum-healthy-hosts type=FLEET_PERCENT,value=75
This ensures that at least 75% of instances remain healthy during deployment.


