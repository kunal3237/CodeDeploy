CodeDeploy Concept
######################################################################

AWS CodeDeploy is a deployment service that automates application deployments to:

    Amazon EC2 instances
    On-premises servers
    AWS Lambda functions
    Amazon ECS services


CodeDeploy can deploy code, scripts, files, Lambda functions, and packages. The source files can be stored in:

    Amazon S3
    GitHub
    Bitbucket


AWS CloudBuild can also deploy code, but CodeDeploy offers additional features, such as:

    Deployment strategies (e.g., Blue/Green, Canary)
    Traffic shifting configurations
    Rollback capabilities

Supported Compute Platforms

    EC2 / On-Premises Servers
    AWS Lambda
    Amazon ECS

Core Components

    Deployment Group – A set of instances or services where the deployment occurs.
    Deployment – The process of rolling out a new application revision to a deployment group.
    Deployment Configuration – Defines how the deployment is executed, including speed, batch size, and success conditions.
        For EC2/On-Prem, it specifies minimum healthy instances.
        For ECS and Lambda, it defines how traffic is shifted to the new version.
    Revision – A specific version of your application (e.g., a ZIP file, Docker image, or Lambda function version).
    Application – A logical entity that links revisions, deployment groups, and configurations to ensure the correct deployment process.

Deployment Type (Strategy)

Defines how the deployment is performed:

    In-Place Deployment (Rolling Update)
        Stops the old version and installs the new one on the same instances.
        Supported for: EC2, On-Premises
        Not available for: ECS, Lambda
    Blue/Green Deployment
        Creates a new set of instances/containers, then switches traffic to the new version.
        Supported for: EC2 (with ALB), ECS, Lambda
        Enables Canary/Linear Deployments using traffic shifting.

Traffic Shifting in Blue/Green Deployment
For EC2:  ####################################Important

EC2 deployments in CodeDeploy do not use ALB-based traffic shifting like ECS or Lambda.
Blue/Green in EC2 does not support Canary/Linear because CodeDeploy does not gradually shift traffic—it simply swaps environments.

How Blue/Green Works in EC2
Create a New Auto Scaling Group (Green) with the new application version.
Detach the old Auto Scaling Group (Blue) from the Load Balancer (if used).
Attach the new Auto Scaling Group (Green) to the Load Balancer.
Terminate the old instances.
This process swaps environments but does not allow gradual traffic shifting (Canary/Linear).

For ECS:

    Traffic is shifted between old and new task sets using an Application Load Balancer (ALB).
    Supports Canary/Linear deployments:
        ECSLinear10PercentEvery1Minutes – Increases traffic by 10% every minute.
        ECSCanary10Percent5Minutes – Shifts 10% traffic first, waits 5 minutes, then shifts the rest.

For Lambda:

    Traffic is shifted between function versions using an alias.
    Supports Canary/Linear deployments:
    Example configurations:
        LambdaCanary10Percent5Minutes – Routes 10% of traffic first, waits 5 minutes, then routes the rest.
        LambdaCanary10Percent10Minutes – Routes 10% of traffic, waits 10 minutes, then routes the rest.

✅ Important: AWS CodeDeploy does not have a separate Canary or Linear deployment type—they are achieved within Blue/Green deployments using traffic shifting configurations.
Deployment Configuration (Speed of Execution)

Deployment configurations define how fast the deployment occurs and can be applied at the deployment group level.
##############################################################
For EC2 / On-Premises
Configuration	Behavior
CodeDeployDefault.AllAtOnce	Deploys to all instances simultaneously
CodeDeployDefault.HalfAtATime	Deploys to 50% of instances at a time
CodeDeployDefault.OneAtATime	Deploys to one instance at a time
###############################################################
For ECS & Lambda
Configuration	Behavior
ECSLinear10PercentEvery1Minutes	Moves 10% of traffic every minute
ECSCanary10Percent5Minutes	Shifts 10% of traffic first, waits 5 minutes, then shifts the rest
LambdaCanary10Percent10Minutes	Shifts 10% of traffic first, waits 10 minutes, then shifts the rest
Creating a Custom Deployment Configuration

aws deploy create-deployment-config \
  --deployment-config-name ThreeQuartersHealthy \
  --minimum-healthy-hosts type=FLEET_PERCENT,value=75

This ensures that at least 75% of instances remain healthy during deployment.
High-Level CodeDeploy Process

    Create EC2 instances or ECS service
    Tag instances (for EC2 deployments only)
    Create an Application in CodeDeploy
    Create a Deployment Group
    Create and upload the application revision (ZIP, Docker image, etc.)
    Deploy the revision using a deployment configuration


